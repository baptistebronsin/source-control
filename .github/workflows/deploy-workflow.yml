name: Deploy Airflow with ArgoCD

on:
  push:
    branches:
      - ArgoCD/Airflow_install  # Déclenche la CI/CD lors des pushs sur la branche
  workflow_dispatch:  # Permet de déclencher manuellement le pipeline

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.20.0'  # Indiquez ici la version de kubectl que vous utilisez

    - name: Set up KUBECONFIG
      env:
        KUBECONFIG_DATA: ${{ secrets.KUBECONFIG }}
      run: |
        echo "$KUBECONFIG_DATA" > $HOME/.kube/config

    - name: Create Kubernetes secrets
      env:
        POSTGRES_USER: ${{ secrets.K8S_SECRET_POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.K8S_SECRET_POSTGRES_PASSWORD }}
        POSTGRES_DB: ${{ secrets.K8S_SECRET_POSTGRES_DB }}
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Secret
        metadata:
          name: secret
          namespace: myargo
        type: Opaque
        data:
          POSTGRES_USER: $(echo -n "$POSTGRES_USER" | base64)
          POSTGRES_PASSWORD: $(echo -n "$POSTGRES_PASSWORD" | base64)
          POSTGRES_DB: $(echo -n "$POSTGRES_DB" | base64)
        EOF

    - name: Apply PostgreSQL Deployment Files
      run: |
        kubectl apply -f ./service.yaml
        kubectl apply -f ./deployment.yaml
        kubectl apply -f ./pvc.yaml

    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64

    - name: Log in to ArgoCD
      env:
        ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
        ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
      run: |
        argocd login localhost:9000 --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure

    - name: Apply Airflow Application in ArgoCD
      run: |
        kubectl apply -f ./application.yaml
